
AWSTemplateFormatVersion: '2010-09-09'
Description: bucket that publishes filtered sns events
Parameters:
  S3BucketName:
    Description: Name of the bucket
    Type: String

{% if sns_topics is defined %}
  TopicSubscribeAccess:
    Description: list of aws principals that can read from the bucket
    Type: CommaDelimitedList
{% if sns_topics.principal_subscribe_access is defined %}
    Default: {{ sns_topics.principal_subscribe_access | join(',') }}
{% else %}
    Default: ${AWS::AccountId}
{% endif %}
{% endif %}

Resources:

{% if sns_topics is defined %}
{% for topic in sns_topics.topics %}
  {{ topic.get('resource_name', topic.name) }}:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: {{ topic.name }}

{% endfor %}

  SNSPublishAndSubscribeToTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSSubscribeTopicPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: Allow the bucket to publish to topic
          Effect: Allow
          Principal:
            AWS: "*"
          Action: sns:Publish
          Resource: "*"
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:s3:::${S3BucketName}
        - Sid: Allow specified aws principals to subscribe
          Effect: Allow
          Principal:
            AWS: !Ref TopicSubscribeAccess
          Action: sns:Subscribe
          Resource: "*"
      Topics:
{% for topic in sns_topics.topics %}
      - !Ref {{ topic.get('resource_name', topic.name) }}
{% endfor %}
{% endif %}

  NewBucket:
    Type: AWS::S3::Bucket
{% if sns_topics is defined %}
    DependsOn: SNSPublishAndSubscribeToTopicPolicy
{% endif %}
    Properties:
      BucketName: !Ref S3BucketName
{% if sns_topics is defined %}
      NotificationConfiguration:
        TopicConfigurations:
{% for topic in sns_topics.topics %}
        - Event: {{ s3_event_shorthand.get(topic.event, topic.event) }}
          Topic: !Ref {{ topic.get('resource_name', topic.name) }}
{% if topic.key_filter is defined %}
          Filter:
            S3Key:
              Rules:
              - Name: {{ topic.get('key_filter_type', 'prefix') }}
                Value: {{ topic.key_filter }}
{% endif %}
{% endfor %}
{% endif %}

  NewBucketRead:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref NewBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: Allow new bucket read
          Effect: Allow
          Principal:
            AWS:
{% if principal_read_access is defined %}
{% for principal in principal_read_access %}
            - {{ principal }}
{% endfor %}
{% else %}
            - ${AWS::AccountId}
{% endif %}
          Action:
          - s3:List*
          - s3:Get*
          Resource:
          - !GetAtt NewBucket.Arn
          - !Join ['', [!GetAtt NewBucket.Arn, '/*']]

Outputs:
  BucketName:
    Value: !Ref NewBucket

  BucketArn:
    Value: !GetAtt NewBucket.Arn

{% if sns_topics is defined %}
{% for topic in sns_topics.topics %}
  {{ topic.get('output_name', (topic.resource_name or topic.name) + 'TopicArn') }}:
    Value: !Ref {{ topic.get('resource_name', topic.name) }}

{% endfor %}
{% endif %}
